{"version":3,"sources":["project/components/common/AllItem.jsx","project/components/header/index.jsx","project/components/common/All.jsx","project/components/main/index.jsx","index.js","project/index.jsx","project/components/common/Slider.jsx"],"names":["props","className","css","box","height","border","overflowY","imageBox","width","margin","images","refs","i","ref","React","createRef","push","style","key","data-src","io","IntersectionObserver","entries","forEach","item","intersectionRatio","target","src","dataset","threshold","onload","observe","current","LazyLoadPage","onError","Slider","arrdata","id","title","address","Brick","lazy","Cupboard","Suspended","TabPane","Tabs","callback","console","log","defaultActiveKey","onChange","tab","All","fallback","ReactDOM","render","document","getElementById","autoplay","map","alt"],"mappings":"mLAiBA,I,qCCde,G,MAAA,SAAAA,GACb,OACE,4BAAQC,UAAU,UAChB,+I,QDJAC,EAAM,CACVC,IAAK,CACHC,OAAQ,QACRC,OAAQ,iBACRC,UAAW,UAEbC,SAAU,CACRC,MAAO,OACPJ,OAAQ,QACRK,OAAQ,cAGNC,EAAS,GACTC,EAAO,GAEJC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IAAMC,EAAMC,IAAMC,YAClBJ,EAAKK,KAAKH,GACVH,EAAOM,KAEL,yBAAKC,MAAOf,EAAIK,SAAUW,IAAKN,EAAGX,UAAU,gBAC1C,yBACEY,IAAKA,EACLM,WAAA,sEAAyEP,EACvE,EADF,YAOR,IAGMQ,EAAK,IAAIC,sBACb,SAAAC,GAEEA,EAAQC,SAAQ,SAAAC,GAEd,KAAIA,EAAKC,mBAAqB,GAA9B,CAFsB,IAGdC,EAAWF,EAAXE,OACRA,EAAOC,IAAMD,EAAOE,QAAQD,UAGhC,CACEE,UAdc,CAAC,OAmBbC,EAAS,WACbnB,EAAKY,SAAQ,SAAAC,GACXJ,EAAGW,QAAQP,EAAKQ,aAaLC,EAPM,kBACnB,yBAAKhB,MAAOf,EAAIC,KACbO,EACD,yBAAKwB,QAASJ,EAAQH,IAAI,OE3Df,WAAA3B,GAsBb,OACE,yBAAKC,UAAU,OAEb,kBAACkC,EAAA,EAAD,CAAQC,QAvBE,CACZ,CACEC,GAAI,EACJC,MAAO,EACPC,QACE,qEAEJ,CACEF,GAAI,EACJC,MAAO,EACPC,QACE,qEAEJ,CACEF,GAAI,EACJC,MAAO,EACPC,QACE,wEAOF,kBAAC,EAAD,MAHF,iB,SCnBAC,G,cAAQC,gBAAK,kBAAM,kCAEnBC,EAAWD,gBAAK,kBAAM,iCAEtBE,EAAYF,gBAAK,kBAAM,iCAEvBG,EAAUC,IAAKD,QAEnB,SAASE,EAAS5B,GAChB6B,QAAQC,IAAI9B,GAEC,eAAAlB,GACb,OACE,0BAAMC,UAAU,QACd,kBAAC,IAAD,CAAMA,UAAU,cAAcgD,iBAAiB,IAAIC,SAAUJ,GAC3D,kBAACF,EAAD,CAASO,IAAI,eAAKjC,IAAI,KAGpB,kBAACkC,EAAD,OAEF,kBAACR,EAAD,CAASO,IAAI,eAAKjC,IAAI,KAEpB,kBAAC,WAAD,CAAUmC,SAAS,0BACjB,kBAACb,EAAD,QAGJ,kBAACI,EAAD,CAASO,IAAI,eAAKjC,IAAI,KAEpB,kBAAC,WAAD,CAAUmC,SAAS,0BACjB,kBAACX,EAAD,QAGJ,kBAACE,EAAD,CAASO,IAAI,eAAKjC,IAAI,KAEpB,kBAAC,WAAD,CAAUmC,SAAS,0BACjB,kBAACV,EAAD,W,cCtCZW,IAASC,OAAO,mBCDD,SAAAvD,GACb,OACE,6BAEE,kBAAC,EAAD,MAEA,kBAAC,EAAD,SDLU,MAASwD,SAASC,eAAe,U,gCELjD,mCAKe,aAAAzD,GAAS,IAEdoC,EAAYpC,EAAZoC,QAER,OACE,kBAAC,IAAD,CAAUsB,SAAS,QAEhBtB,EAAQuB,KAAI,SAAAnC,GACX,OACE,yBAAKN,IAAKM,EAAKa,IACb,yBAAKV,IAAKH,EAAKe,QAASqB,IAAI,Y","file":"static/js/main.45e25cfa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst css = {\r\n  box: {\r\n    height: \"400px\",\r\n    border: \"1px solid pink\",\r\n    overflowY: \"scroll\"\r\n  },\r\n  imageBox: {\r\n    width: \"100%\",\r\n    height: \"500px\",\r\n    margin: \"20px auto\"\r\n  }\r\n};\r\nconst images = []; // 要加载的 img 图片（jsx）\r\nconst refs = []; // 图片的 ref（操作dom时用）\r\n\r\nfor (let i = 0; i < 4; i++) {\r\n  // 添加4张待加载的图片\r\n  const ref = React.createRef(); // 新建空 ref\r\n  refs.push(ref); // 放入 ref 数组\r\n  images.push(\r\n    // 新建 img jsx 放入 images （图片地址不放入 src 而是放入 自定义属性 data-src）\r\n    <div style={css.imageBox} key={i} className=\"main-img-box\">\r\n      <img\r\n        ref={ref}\r\n        data-src={`https://raw.githubusercontent.com/lq110/-/master/all/slider0${i +\r\n          1}.png`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst threshold = [0.01]; // 这是触发时机 0.01代表出现 1%的面积出现在可视区触发一次回掉函数 threshold = [0, 0.25, 0.5, 0.75]  表示分别在0% 25% 50% 75% 时触发回掉函数\r\n\r\n// 利用 IntersectionObserver 监听元素是否出现在视口\r\nconst io = new IntersectionObserver(\r\n  entries => {\r\n    // 观察者\r\n    entries.forEach(item => {\r\n      // entries 是被监听的元素集合它是一个数组\r\n      if (item.intersectionRatio <= 0) return; // intersectionRatio 是可见度 如果当前元素不可见就结束该函数。\r\n      const { target } = item;\r\n      target.src = target.dataset.src; // 将 h5 自定义属性赋值给 src (进入可见区则加载图片)\r\n    });\r\n  },\r\n  {\r\n    threshold // 添加触发时机数组\r\n  }\r\n);\r\n\r\n// onload 函数\r\nconst onload = () => {\r\n  refs.forEach(item => {\r\n    io.observe(item.current); // 添加需要被观察的元素。\r\n  });\r\n};\r\n\r\n// 定义懒加载纯函数组件\r\n// 为了监听页面加载完毕 定义了一个img 利用 onerror 函数替代 onlaod {src需填写一个不存在图片的路径}\r\nconst LazyLoadPage = () => (\r\n  <div style={css.box}>\r\n    {images}\r\n    <img onError={onload} src=\"\" />\r\n  </div>\r\n);\r\n\r\nexport default LazyLoadPage;\r\n","import React from \"react\";\r\nimport \"./header.scss\";\r\n\r\nexport default props => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>洛阳装修李先生：15978678836 装修区域：洛阳市</h1>\r\n    </header>\r\n  );\r\n};\r\n","// 整体\r\nimport React from \"react\";\r\nimport Slider from \"./Slider\"; // 轮播图\r\nimport LazeImg from \"./AllItem\";\r\nexport default props => {\r\n  // 整体轮播图\r\n  let arrData = [\r\n    {\r\n      id: 1,\r\n      title: 1,\r\n      address:\r\n        \"https://raw.githubusercontent.com/lq110/-/master/all/slider01.png\"\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 2,\r\n      address:\r\n        \"https://raw.githubusercontent.com/lq110/-/master/all/slider02.png\"\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 3,\r\n      address:\r\n        \"https://raw.githubusercontent.com/lq110/-/master/all/slider03.png\"\r\n    }\r\n  ];\r\n  return (\r\n    <div className=\"All\">\r\n      {/* 轮播图 */}\r\n      <Slider arrdata={arrData} />\r\n      <LazeImg />\r\n      整体\r\n    </div>\r\n  );\r\n};\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport All from \"../common/All\"; // 整体\r\nimport { Tabs } from \"antd\";\r\nimport \"../common/style/imgItem.scss\";\r\nimport \"./main.scss\";\r\n// console.log(Tabs);\r\n// 懒加载组件\r\n//  铺砖\r\nlet Brick = lazy(() => import(\"../common/Brick\"));\r\n// 厨具\r\nlet Cupboard = lazy(() => import(\"../common/Cupboard\"));\r\n// 吊顶\r\nlet Suspended = lazy(() => import(\"../common/Suspended\"));\r\n\r\nvar TabPane = Tabs.TabPane;\r\n\r\nfunction callback(key) {\r\n  console.log(key);\r\n}\r\nexport default props => {\r\n  return (\r\n    <main className=\"main\">\r\n      <Tabs className=\"header-tabs\" defaultActiveKey=\"1\" onChange={callback}>\r\n        <TabPane tab=\"整体\" key=\"1\">\r\n          {/* 整体 */}\r\n\r\n          <All />\r\n        </TabPane>\r\n        <TabPane tab=\"铺砖\" key=\"2\">\r\n          {/* 铺砖 */}\r\n          <Suspense fallback=\"加载中....\">\r\n            <Brick />\r\n          </Suspense>\r\n        </TabPane>\r\n        <TabPane tab=\"橱柜\" key=\"3\">\r\n          {/* 橱柜 */}\r\n          <Suspense fallback=\"加载中....\">\r\n            <Cupboard />\r\n          </Suspense>\r\n        </TabPane>\r\n        <TabPane tab=\"吊顶\" key=\"4\">\r\n          {/* 吊顶 */}\r\n          <Suspense fallback=\"加载中....\">\r\n            <Suspended />\r\n          </Suspense>\r\n        </TabPane>\r\n      </Tabs>\r\n    </main>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./project/index\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { Component } from \"react\";\r\nimport Header from \"./components/header/\"; // 头部\r\nimport Main from \"./components/main/\"; // 内容\r\n// 根目录\r\nexport default props => {\r\n  return (\r\n    <div>\r\n      {/* 头部组件 */}\r\n      <Header />\r\n      {/* 内容 */}\r\n      <Main />\r\n    </div>\r\n  );\r\n};\r\n","// 轮播图\r\nimport React from \"react\";\r\nimport { Carousel } from \"antd\";\r\nimport \"./style/slider.scss\";\r\n\r\nexport default props => {\r\n  // 结构出数据\r\n  const { arrdata } = props;\r\n\r\n  return (\r\n    <Carousel autoplay=\"true\">\r\n      {/* 遍历渲染 */}\r\n      {arrdata.map(item => {\r\n        return (\r\n          <div key={item.id}>\r\n            <img src={item.address} alt=\"\" />\r\n          </div>\r\n        );\r\n      })}\r\n    </Carousel>\r\n  );\r\n};\r\n"],"sourceRoot":""}