{"version":3,"sources":["project/components/common/BrickItem.jsx","project/components/common/Brick.jsx"],"names":["css","box","height","border","overflowY","imageBox","width","margin","images","refs","i","ref","React","createRef","push","style","key","data-src","io","IntersectionObserver","entries","forEach","item","intersectionRatio","target","src","dataset","threshold","onload","observe","current","LazyLoadPage","onError","arrData","id","title","address","props","className","Slider","arrdata"],"mappings":"iHAiBA,I,4BAfMA,EAAM,CACVC,IAAK,CACHC,OAAQ,QACRC,OAAQ,iBACRC,UAAW,UAEbC,SAAU,CACRC,MAAO,QACPJ,OAAQ,QACRK,OAAQ,cAGNC,EAAS,GACTC,EAAO,GAEJC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IAAMC,EAAMC,IAAMC,YAClBJ,EAAKK,KAAKH,GACVH,EAAOM,KAEL,yBAAKC,MAAOf,EAAIK,SAAUW,IAAKN,GAC7B,yBACEC,IAAKA,EACLM,WAAA,+EAAkFP,EAChF,EADF,YAOR,IAGMQ,EAAK,IAAIC,sBACb,SAAAC,GAEEA,EAAQC,SAAQ,SAAAC,GAEd,KAAIA,EAAKC,mBAAqB,GAA9B,CAFsB,IAGdC,EAAWF,EAAXE,OACRA,EAAOC,IAAMD,EAAOE,QAAQD,UAGhC,CACEE,UAdc,CAAC,OAmBbC,EAAS,WACbnB,EAAKY,SAAQ,SAAAC,GACXJ,EAAGW,QAAQP,EAAKQ,aAaLC,EAPM,kBACnB,yBAAKhB,MAAOf,EAAIC,KACbO,EACD,yBAAKwB,QAASJ,EAAQH,IAAI,OC1D1BQ,EAAU,CACZ,CACEC,GAAI,EACJC,MAAO,EACPC,QACE,sEAEJ,CACEF,GAAI,EACJC,MAAO,EACPC,QACE,uEAGS,mBAAAC,GACb,OACE,yBAAKC,UAAU,OAEb,kBAACC,EAAA,EAAD,CAAQC,QAASP,IAEjB,kBAAC,EAAD","file":"static/js/3.24701276.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst css = {\r\n  box: {\r\n    height: \"400px\",\r\n    border: \"1px solid pink\",\r\n    overflowY: \"scroll\"\r\n  },\r\n  imageBox: {\r\n    width: \"500px\",\r\n    height: \"500px\",\r\n    margin: \"20px auto\"\r\n  }\r\n};\r\nconst images = []; // 要加载的 img 图片（jsx）\r\nconst refs = []; // 图片的 ref（操作dom时用）\r\n\r\nfor (let i = 0; i < 9; i++) {\r\n  // 添加4张待加载的图片\r\n  const ref = React.createRef(); // 新建空 ref\r\n  refs.push(ref); // 放入 ref 数组\r\n  images.push(\r\n    // 新建 img jsx 放入 images （图片地址不放入 src 而是放入 自定义属性 data-src）\r\n    <div style={css.imageBox} key={i}>\r\n      <img\r\n        ref={ref}\r\n        data-src={`https://raw.githubusercontent.com/lq110/-/master/brick/itemImg/brick0${i +\r\n          1}.png`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst threshold = [0.01]; // 这是触发时机 0.01代表出现 1%的面积出现在可视区触发一次回掉函数 threshold = [0, 0.25, 0.5, 0.75]  表示分别在0% 25% 50% 75% 时触发回掉函数\r\n\r\n// 利用 IntersectionObserver 监听元素是否出现在视口\r\nconst io = new IntersectionObserver(\r\n  entries => {\r\n    // 观察者\r\n    entries.forEach(item => {\r\n      // entries 是被监听的元素集合它是一个数组\r\n      if (item.intersectionRatio <= 0) return; // intersectionRatio 是可见度 如果当前元素不可见就结束该函数。\r\n      const { target } = item;\r\n      target.src = target.dataset.src; // 将 h5 自定义属性赋值给 src (进入可见区则加载图片)\r\n    });\r\n  },\r\n  {\r\n    threshold // 添加触发时机数组\r\n  }\r\n);\r\n\r\n// onload 函数\r\nconst onload = () => {\r\n  refs.forEach(item => {\r\n    io.observe(item.current); // 添加需要被观察的元素。\r\n  });\r\n};\r\n\r\n// 定义懒加载纯函数组件\r\n// 为了监听页面加载完毕 定义了一个img 利用 onerror 函数替代 onlaod {src需填写一个不存在图片的路径}\r\nconst LazyLoadPage = () => (\r\n  <div style={css.box}>\r\n    {images}\r\n    <img onError={onload} src=\"\" />\r\n  </div>\r\n);\r\n\r\nexport default LazyLoadPage;\r\n","// 铺砖\r\nimport React from \"react\";\r\nimport Slider from \"./Slider\"; //轮播图\r\nimport BackItem from \"./BrickItem\"; //图片\r\n// 整体轮播图\r\nlet arrData = [\r\n  {\r\n    id: 1,\r\n    title: 1,\r\n    address:\r\n      \"https://raw.githubusercontent.com/lq110/-/master/brick/slider1.png\"\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 2,\r\n    address:\r\n      \"https://raw.githubusercontent.com/lq110/-/master/brick/slider2.png\"\r\n  }\r\n];\r\nexport default props => {\r\n  return (\r\n    <div className=\"All\">\r\n      {/* 轮播图 */}\r\n      <Slider arrdata={arrData} />\r\n      {/* 懒加载图片部分 */}\r\n      <BackItem />\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}